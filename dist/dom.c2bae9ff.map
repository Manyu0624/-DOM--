{"version":3,"sources":["dom.js"],"names":["window","dom","style","node","name","value","arguments","length","Object","object","key","find","selector","scope","document","querySelectorAll","each","nodeList","fn","i","call"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,GAAP,GAAa;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,SAtES,iBAsEHC,IAtEG,EAsEGC,IAtEH,EAsESC,KAtET,EAsEgB;AACrB,YAAIC,UAAUC,MAAV,KAAqB,CAAzB,EAA4B;AACxB;AACAJ,iBAAKD,KAAL,CAAWE,IAAX,IAAmBC,KAAnB;AACH,SAHD,MAGO,IAAIC,UAAUC,MAAV,KAAqB,CAAzB,EAA4B;AAC/B,gBAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACA,uBAAOD,KAAKD,KAAL,CAAWE,IAAX,CAAP;AACH,aAHD,MAGO,IAAIA,gBAAgBI,MAApB,EAA4B;AAC/B;AACA,oBAAMC,SAASL,IAAf;AACA,qBAAK,IAAIM,GAAT,IAAgBD,MAAhB,EAAwB;AACpBN,yBAAKD,KAAL,CAAWQ,GAAX,IAAkBD,OAAOC,GAAP,CAAlB;AACH;AACJ;AACJ;AACJ,KAtFQ;AAwFTC,QAxFS,gBAwFJC,QAxFI,EAwFMC,KAxFN,EAwFa;AAClB,eAAO,CAACA,SAASC,QAAV,EAAoBC,gBAApB,CAAqCH,QAArC,CAAP;AACH,KA1FQ;AA6FTI,QA7FS,gBA6FJC,QA7FI,EA6FMC,EA7FN,EA6FU;AACf,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAASV,MAA7B,EAAqCY,GAArC,EAA0C;AACtCD,eAAGE,IAAH,CAAQ,IAAR,EAAcH,SAASE,CAAT,CAAd;AACH;AACJ;AAjGQ,CAAb","file":"dom.c2bae9ff.map","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    // create(tag) {\r\n    //     const box = document.createElement('template');\r\n    //     box.innerHTML = tag.trim();\r\n    //     return box.content.firstChild;\r\n    // },\r\n    // before(node, node2) {\r\n    //     node.parentNode.insertBefore(node2, node);\r\n    //     return node\r\n    // },\r\n    // append(parent, node) {\r\n    //     parent.appendChild(node);\r\n    //     return node\r\n    // },\r\n    // wrap(node, parent) {\r\n    //     dom.before(node, parent);\r\n    //     dom.append(parent, node);\r\n    // },\r\n    // remove(node) {\r\n    //     node.remove(node)\r\n    //     return node\r\n    // },\r\n    // empty(node) {\r\n    //     const array = [];\r\n    //     let x = node.firstChild\r\n    //     while (x) {\r\n    //         array.push(dom.remove(node.firstChild))\r\n    //         x = node.firstChild\r\n\r\n    //     }\r\n    //     return array\r\n    // },\r\n    // attr(node, name, value) {\r\n    //     node.setAttribute(name, value)\r\n    //     return node\r\n    // },\r\n    // attr(node, name, value) { // 重载\r\n    //     if (arguments.length === 3) {\r\n    //         return node.setAttribute(name, value)\r\n    //     } else if (arguments.length === 2) {\r\n    //         return node.getAttribute(name)\r\n    //     }\r\n    // },\r\n    // text(node, string) {\r\n    //     if (arguments.length === 2) {\r\n    //         if ('innerText' in node) {\r\n    //             node.innerText = string\r\n    //         } else if ('textContent' in node) {\r\n    //             node.textContent = var1\r\n    //         }\r\n    //         return string\r\n    //     } else if (arguments.length === 1) {\r\n    //         if ('innerText' in node) {\r\n    //             return node.innerText\r\n    //         } else if ('textContent' in node) {\r\n    //             return node.textContent\r\n    //         }\r\n    //     }\r\n\r\n    // },\r\n    // html(node, string) {\r\n    //     if (arguments.length === 2) {\r\n    //         node.innerHTML = string\r\n    //             // return node.innerHTML\r\n    //     } else if (arguments.length === 1) {\r\n    //         return node.innerHTML\r\n    //             // node.innerHTML = string\r\n    //     }\r\n    //     return node\r\n    // },\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            // dom.style(div, 'color', 'red')\r\n            node.style[name] = value\r\n        } else if (arguments.length === 2) {\r\n            if (typeof name === 'string') {\r\n                // dom.style(div, 'color')\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                // dom.style(div, {color: 'red'})\r\n                const object = name\r\n                for (let key in object) {\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    find(selector, scope) {\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n\r\n\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}"]}